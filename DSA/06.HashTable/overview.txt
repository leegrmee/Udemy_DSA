Hash Tables

key words:
1. One way to store data 
2. Deterministic 

collision:
collision happens when you put a key-value pair at an adress where there is already a another key-value pair.

resolution:
1. separate chaining
    -> 각각의 버킷에 연결 리스트를 사용하여 충돌을 해결하는 방법
    -> store the key-value pair in the same bucket.
    -> if the key is the same, the value is overwritten.
    -> if the key is different, the key-value pair is added to the end of the list.
 
2. linear probing(open addressing)
    -> 충돌이 발생하면 다음 버킷으로 이동하여 비어있는 버킷을 찾는 방법
    -> search empty bucket and store the key-value pair
    -> 충돌이 발생해서 다른 버킷에 저장된 경우, 키를 통해 유무를 확인할 때 해시 코드에 따른 버킷을 먼저 확인한 후 다른 버킷도 확인해봄 
    -> So, if the key which is stored in the bucket, is deleted, 
    the key which has same hash code should be relocated to the empty bucket or you should put the dummy data in that bucket


hash table resizing
-  파이썬 3.10.x 기준으로는 일반적으로 (dictionary의 유효 데이터 수 x 3)과 같거나 큰 수 중에서 가장 작은 2의 배수를 새로운 capacity 크기로 결정
shrinking
- resizing을 수행할 때 만약 dictionary에 더미 데이터가 많고 유효한 데이터는 적은 상태라면, 유효한 데이터 수를 기준으로 새로운 capacity가 정해지기 때문에, 자연스럽게 새로운 capacity는 이전보다  작게 잡힐 수 


Big O

for a given key of a certaisize, it will always be the same number of operations to caculate the hash.
That means Hash method itself is O(1)

The worst scenario is that every key-value pair is stored in the same bucket.
That means the time complexity of get_item is O(n)
But, the assumption is that the keys are uniformly distributed.

-Both Insert and Lookup by key in a Hash Table is O(1)
-Since a Hash Table is O(1) for Insert and Lookup it is always better than a Binary Search Tree: FALSE
 >Binary Search Trees are sorted which makes them better at searching for all values that fall within a range.
-Looking up a value in a Hash Table is O(1): FALSE
 > Key lookup is O(1) but not value.
 