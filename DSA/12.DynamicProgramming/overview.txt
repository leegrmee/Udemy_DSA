Dynamic Programming = 수행시간을 줄이는 기법
 -메모리를 사용해서 중복연산을 줄이고 중복연산을 줄여서 수행시간 단축
 - 메모리를 사용한다 = 또 하나의 배열 또는 자료구조를 만든다
 -To reduce the time of running the program using memoization for optimization of time complexity


Overlapping Subproblems
 -중복되는 부분 문제
  
Optimal Substructure
 -최적 부분 구조

 Memoization
 - usually used for dynamic programming recursively 
 - store the result of a function call and return the cached result when the same inputs occur again
 - But, you can use memoization with an iterative bottom-up approach as well.
 - The second time of running iterative bottom-up approach using memoization is O of 1.
 - But, you should notice that it takes more memory. 


Top-Down Approach
 - Recursive with memoization
 - Start with the top of the problem and work down to the base case

Bottom-Up Approach
 - Iterative
 - Start with the base case and work up to the top of the problem
 - O of n 

1. DFS/ BFS 로 풀 수 있지만 경우의 수가 너무 많을 때
 -cf)DFS/ BFS 로 풀 수 있는 최대 경우의 수는 약 500만개, 5*10^6
2. 경우의 수들에 중복연산이 많은 경우